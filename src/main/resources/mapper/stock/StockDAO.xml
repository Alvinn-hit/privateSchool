<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.recklessmo.dao.stock.StockDAO">


    <!--goods start-->

    <sql id = "goodscolumns">
        id, org_id, name, pym, gg, type, dw, cjmc, dcbz, in_time, in_user_id, in_user_name, current_count, status, updated, comment
    </sql>

    <sql id = "goodscolumnsWithoutid">
        (org_id, name, pym, gg, type, dw, cjmc, dcbz, in_time, in_user_id, in_user_name, current_count, status, updated, comment)
    </sql>


    <insert id="addGoods" parameterType="com.recklessmo.model.stock.Goods">
        insert into goods
        <include refid="goodscolumnsWithoutid"/>
        values(#{orgId}, #{name}, #{pym}, #{gg}, #{type}, #{dw}, #{cjmc}, #{dcbz}, #{inTime}, #{inUserId}, #{inUserName}, #{currentCount}, #{status}, #{updated}, #{comment})
    </insert>

    <insert id="updateGoods" parameterType="com.recklessmo.model.stock.Goods">
        update goods
        set org_id = #{orgId}, name = #{name}, pym = #{pym}, gg = #{gg}, type = #{type}, dw = #{dw}, cjmc = #{cjmc}, dcbz = #{dcbz}, in_time = #{inTime}, in_user_id = #{inUserId}, in_user_name = #{inUserName}
        , current_count = #{currentCount}, status = #{status}, updated = #{updated}, comment = #{comment}
        where id = #{id}
    </insert>

    <update id="deleteGoods">
        update goods
        set status = #{status}
        where id = #{id} and org_id = #{orgId}
    </update>

    <sql id="byGoodsPageQuery">
        where org_id=#{orgId} and status = #{status}
        <if test="null != searchStr and '' != searchStr">
            and (name like "%"#{searchStr}"%" or cjmc like "%"#{searchStr}"%" or pym like "%"#{searchStr}"%")
        </if>
        <if test="0 != type">
            and current_count <![CDATA[<=]]> dcbz
        </if>
        order by in_time desc
    </sql>

    <select id="listGoods" resultType="com.recklessmo.model.stock.Goods">
        select
        <include refid="goodscolumns"/>
        from goods
        <include refid="byGoodsPageQuery"/>
        limit #{startIndex}, #{count}
    </select>

    <select id="listGoodsCount" resultType="java.lang.Integer">
        select count(1) from goods
        <include refid="byGoodsPageQuery"/>
    </select>

    <!--goods end -->
    <resultMap id="stockResultMap" type="com.recklessmo.model.stock.Stock">
        <id column="s_id" property="id"/>
        <result column="s_org_id" property="orgId"/>
        <result column="s_stock_type" property="stockType"/>
        <result column="s_category" property="category"/>
        <result column="s_ghdw" property="ghdw"/>
        <result column="s_user_id" property="userId"/>
        <result column="s_user_name" property="userName"/>
        <result column="s_client_name" property="clientName"/>
        <collection property="items" resultMap="stockItemMap"/>
    </resultMap>

    <resultMap id="stockItemMap" type="com.recklessmo.model.stock.StockItem">
        <id column="i_id" property="id"/>
        <result column="i_org_id" property="orgId"/>
        <result column="i_stock_id" property="stockId"/>
        <result column="i_stock_type" property="stockType"/>
        <result column="i_category" property="category"/>
        <result column="i_goods_id" property="goodsId"/>
        <result column="i_count" property="count"/>
        <association property="goods" resultMap="goodsMap"/>
    </resultMap>

    <resultMap id="goodsMap" type="com.recklessmo.model.stock.Goods">
        <id column="g_id" property="id"/>
        <result column="g_org_id" property="orgId"/>
        <result column="g_name" property="name"/>
        <result column="g_gg" property="gg"/>
        <result column="g_dw" property="dw"/>
        <result column="g_cjmc" property="cjmc"/>
        <result column="g_current_count" property="currentCount"/>
    </resultMap>


    <sql id="getStockColumns">
        s.id as s_id,
        s.org_id as s_org_id,
        s.stock_type as s_stock_type,
        s.category as s_category,
        s.ghdw as s_ghdw,
        s.user_id as s_user_id,
        s.user_name as s_user_name,
        s.client_name as s_client_name
    </sql>

    <sql id="getStockItemColumns">
        i.id as i_id,
        i.org_id as i_org_id,
        i.stock_id as i_stock_id,
        i.stock_type as i_stock_type,
        i.category as i_category,
        i.goods_id as i_goods_id,
        i.count as i_count
    </sql>

    <sql id="getGoodsColumns">
        g.id as g_id,
        g.org_id as g_org_id,
        g.name as g_name,
        g.dw as g_dw,
        g.gg as g_gg,
        g.cjmc as g_cjmc,
        g.current_count as g_current_count
    </sql>

    <sql id="stockColumns">
        id, org_id, stock_type, category, ghdw, user_id, user_name, client_name,created, bill_number, comment
    </sql>

    <sql id="stockColumnsWithoutId">
        org_id, stock_type, category, ghdw, user_id, user_name, client_name, created, bill_number, comment
    </sql>

    <sql id="stockItemColumns">
        id, org_id, stock_id, stock_type, category, goods_id, count
    </sql>

    <sql id="stockItemColumnsWithoutId">
        org_id, stock_id, stock_type, category, goods_id, count
    </sql>

    <sql id="stockHistoryColumns">
        i.org_id, i.goods_id, s.stock_type, s.category, g.name, g.gg, g.dw, g.cjmc, i.count, s.user_name, s.created
    </sql>


    <sql id="byStockPageQuery">
        where stock_type = #{stockType}
        <if test="category != null and category != '' ">
          and category = #{category}
        </if>
        <if test="searchStr != '' and searchStr != null">
          and user_name like "%"#{searchStr}"%"
        </if>
    </sql>

    <select id="listStock" resultType="com.recklessmo.model.stock.Stock">
        select
        <include refid="stockColumns"/>
        from stock
        <include refid="byStockPageQuery"/>
        limit #{startIndex}, #{count}
    </select>

    <select id="listStockCount" resultType="java.lang.Integer">
        select count(1) from stock
        <include refid="byStockPageQuery"/>
    </select>


    <insert id="addStock" parameterType="com.recklessmo.model.stock.Stock">
        insert into stock
        (<include refid="stockColumnsWithoutId"/>)
        values
        (#{stockType}, #{category}, #{ghdw}, #{userId}, #{userName},#{clientName}, #{created}, #{billNumber}, #{comment})
        <selectKey keyProperty="id" resultType="long">
            <![CDATA[SELECT LAST_INSERT_ID() AS id ]]>
        </selectKey>
    </insert>

    <insert id="addStockItem" parameterType="com.recklessmo.model.stock.StockItem">
        insert into stock_item
        (<include refid="stockItemColumnsWithoutId"/>)
        values(#{stockId}, #{stockType}, #{category}, #{goodsId}, #{count})
    </insert>

    <select id="getStock" resultMap="stockResultMap">
        select
        <include refid="getStockColumns"/>,
        <include refid="getStockItemColumns"/>,
        <include refid="getGoodsColumns"/>
        from
        stock s inner join stock_item i on s.id = i.stock_id
        inner join goods g on i.goods_id = g.id
        where s.id = #{id}
    </select>

    <update id="updateGoodsCount">
        update goods
        set current_count = current_count + #{count}
        where id = #{goodsId}
    </update>

    <select id="getStockItemsByGoodsId" resultType="com.recklessmo.model.stock.StockHistory">
        select
        <include refid="stockHistoryColumns"/>
        from
        stock s inner join stock_item i on s.id = i.stock_id
        inner join goods g on i.goods_id = g.id
        where i.goods_id = #{goodsId}
        order by s.created asc
    </select>
</mapper>